name: Inspect PR for GitHub Issue Link

on:
  pull_request:
    types: [opened, synchronize]

env:
  BOT: ${{ secrets.BOT }}

jobs:
  inspect_pr_job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run inspection script
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          PR_TITLE=$(jq -r ".pull_request.title" $GITHUB_EVENT_PATH)
          PR_BODY=$(jq -r ".pull_request.body" $GITHUB_EVENT_PATH)

          # Regular expression pattern to match GitHub issue references (e.g., #123)
          PATTERN="#[0-9]+"

          if [[ $PR_TITLE =~ $PATTERN || $PR_BODY =~ $PATTERN ]]; then
            echo "PR contains a GitHub issue reference."
          else
            echo "PR does not contain a GitHub issue reference. Adding a comment..."
            COMMENT_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/comments"
            COMMENT_BODY="This pull request does not reference a GitHub issue. Please make sure to reference a GitHub issue in the PR title or description."
            curl -X POST -H "Authorization: Bearer $BOT" -d "{\"body\": \"$COMMENT_BODY\"}" $COMMENT_URL
            exit 1
          fi

          python - <<EOF
          import os
          import requests

          GITHUB_API_URL = "https://api.github.com"
          GITHUB_ACCESS_TOKEN = os.environ.get("GITHUB_ACCESS_TOKEN")

          def check_issue_reference(repo_full_name, pr_number):
              url = f"{GITHUB_API_URL}/repos/{repo_full_name}/pulls/{pr_number}/commits"
              headers = {"Authorization": f"token {GITHUB_ACCESS_TOKEN}"}
              response = requests.get(url, headers=headers)
              commits = response.json()

              for commit in commits:
                  if "message" in commit["commit"] and "issue #" in commit["commit"]["message"].lower():
                      return True

              return False

          def add_comment_to_pr(repo_full_name, pr_number):
              url = f"{GITHUB_API_URL}/repos/{repo_full_name}/issues/{pr_number}/comments"
              headers = {"Authorization": f"token {GITHUB_ACCESS_TOKEN}"}
              data = {
                  "body": "This pull request does not reference a GitHub issue. Please link to an issue in the PR description."
              }
              response = requests.post(url, headers=headers, json=data)
              if response.status_code == 201:
                  print("Comment added successfully!")
              else:
                  print(f"Failed to add comment. Status code: {response.status_code}")

          if __name__ == "__main__":
              repo_full_name = os.environ.get("GITHUB_REPOSITORY")
              pr_number = os.environ.get("PR_NUMBER")

              has_issue_reference = check_issue_reference(repo_full_name, pr_number)

              if not has_issue_reference:
                  add_comment_to_pr(repo_full_name, pr_number)
          EOF
